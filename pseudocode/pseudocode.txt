
Penetration Testing Workflow Pseudocode

def planning_and_preparation():
    /* This function mimics the planning and preparation phase of a pentest */
    this includes: Gather information on systems and architecture used, the newtwork etc
    Also, the clients define the testing scope

    return systems_report_and_scope_report

def information_gathering():
    /* This is the reconnaisance phase where the pentester Performs network scans to gather
    information such as the IP, the open ports and vulnerabilities */
    - To keep the project simple, I will limit it to just the network scans
    - I have created some dummy json data that I can use for this process. 

    return system_information (in this case network logs)

def vulnerability_analysis(newtwork_logs):
    this function takes in the log details as an input and evaulates of the 
    aggregated details from the information_gathering() function have a 
    vulnerability or not: 

    return vulnerability_report


def check_vulnerability_status(vulnerability_report):
    /* Function checks whether a vulnerability exists before attempting to exploit the vulnerability */

    if vulnerability_report has a vulnerability
        attempt_exploit(network) /* attempt to exploit the network */
    else:
        /* try something else */
        additional_vulnerability_scans(network )

def additional_vulnerability_checks(vulnerability_report):
    /* This function Performs additional vulnerability checks, incase there were none originally */
    additional_report = perform_additional_scans(vulnerability_report)
    if additional_report.has_vulnerability():
        attempt_exploit(newtwork)
    else:
        add to the final report

def attempt_exploit(vulnerability_report):
    /* This is part of the pentest process where the tester will attempt to vreak into the 
    system. The tester will Try different exploitation methods (e.g., fuzzing, SQLi, trying a buffer
    overflow etc)

    testing_report = try_exploitation_methods(network)
    return the testing report (results?)

def check_exploitation_status(testing_report):
    /* This function takes in the results from the attempted exploit and checks whether it was
    succesful */
    if testing_report indicates that exploitation_successful:
        /* pass it into the risk assesment phase to check risk - e.g was he able to exfiltate data etc..
        risk_assesment(report)
    else:
        /* try something else to exhaust options */
        alternative_exploitation_methods(report)

def alternative_exploitation_methods(testing_report):
    /* Attempt alternative exploitation methods, to exhaust options that a bad actor would use 
    alternative_report = try_alternative_methods(testing_report)
    if alternative_report.exploitation_successful():
        risk_assessment(alternative_report)

    else:
        Add to the final report

def risk_assessment(exploitation_report):
    /* This phase takes the report from the attempt exploit phase and evaluates the risk
    - Assess risk (data exfiltration, system access, etc.)
   
    return risk_report & append to final report

def final_reporting():
    /* This is the final reporting phase for the pentest process */
     Compile all reports
    returns all the reports from the check vulnerabilities, check exploitation and risk assesment steps

