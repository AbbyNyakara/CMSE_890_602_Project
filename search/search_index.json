{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Penetration Testing Sample Workflow Documentation","text":"<p>Penetration Testing - Information</p> <p>Penetration testing, or \"pen testing,\" is a security check where experts mimic real cyberattacks to spot vulnerabilities in systems, networks, or applications. It\u2019s a way to test how well existing security measures hold up, uncover potential weaknesses  that hackers might exploit, and offer suggestions to strengthen defenses. Pen testing can involve manual methods, automated tools, or a mix of both, making it an essential step for staying ahead in cybersecurity.</p> <p>Project Limits</p> <p>The penetration testing process typically involves detailed discussions and clearly defined boundaries  before gaining authorization to access any systems. In this project, no real systems were accessed or scanned.  All data utilized is entirely simulated, ensuring that no actual networks were involved in the testing.</p> <p>This code is to serve as an example workflow of how a pentest process will be done - The actual implementation varies across different companies and situations</p>"},{"location":"functions/attempt_exploit/","title":"Attempt Exploit Module","text":""},{"location":"functions/attempt_exploit/#src.attempt_exploit.attempt_exploit","title":"<code>attempt_exploit(vulnerability_report)</code>","text":"<p>Simulates a controlled vulnerability exploitation attempt.</p> <p>This function provides a simulated exploration of potential vulnerability  exploitation, focusing on gathering additional information and assessing  potential impact.</p> <p>Parameters:</p> Name Type Description Default <code>vulnerability_report</code> <code>dict</code> <p>A dictionary containing overall vulnerability report information, including device reports.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A report of the simulated exploitation attempts for all devices.</p> Source code in <code>src/attempt_exploit.py</code> <pre><code>def attempt_exploit(vulnerability_report):\n    \"\"\"\n    Simulates a controlled vulnerability exploitation attempt.\n\n    This function provides a simulated exploration of potential vulnerability \n    exploitation, focusing on gathering additional information and assessing \n    potential impact.\n\n    Args:\n        vulnerability_report (dict): A dictionary containing overall vulnerability report information, including device reports.\n\n    Returns:\n        list: A report of the simulated exploitation attempts for all devices.\n    \"\"\"\n\n    all_exploit_reports = []\n    vulnerability_impact_mapping = {\n        \"Zerologon\": (\"Privilege Escalation\", (7.0, 9.5)),\n        \"BlueKeep\": (\"Remote Code Execution\", (8.0, 10.0)),\n        \"Log4Shell\": (\"Remote Code Execution\", (6.0, 9.0)),\n        \"Spring4Shell\": (\"Remote Code Execution\", (7.0, 9.5)),\n        \"PrintNightmare\": (\"Privilege Escalation\", (6.5, 8.5))\n    }\n\n    for device in vulnerability_report.get(\"device_reports\", []):\n        exploit_report = {\n            \"ip_address\": device.get(\"ip_address\"),\n            \"operating_system\": device.get(\"OS\"),\n            \"vulnerabilities\": device.get(\"vulnerabilities\", []),\n            \"risk_level\": device.get(\"risk_level\"),\n            \"exploit_simulation_results\": []\n        }\n\n        for vulnerability in device[\"vulnerabilities\"]:\n            impact, score_range = vulnerability_impact_mapping.get(\n                vulnerability.split()[0], (\"Unknown\", (3.0, 7.0)))\n            exploitability_score = random.uniform(*score_range)\n            simulation_success_probability = (\n                \"High\" if exploitability_score &gt; 7.0 else\n                \"Medium\" if exploitability_score &gt; 5.0 else\n                \"Low\"\n            )\n\n            simulation_result = {\n                \"vulnerability\": vulnerability,\n                \"exploitability_score\": exploitability_score,\n                \"potential_impact\": impact,\n                \"simulation_status\": \"Attempted\",\n                \"simulation_success_probability\": simulation_success_probability\n            }\n\n            exploit_report[\"exploit_simulation_results\"].append(\n                simulation_result)\n\n        all_exploit_reports.append(exploit_report)\n\n    return all_exploit_reports\n</code></pre>"},{"location":"functions/check_exploitation_status/","title":"Check Exploitation Status","text":""},{"location":"functions/check_exploitation_status/#src.check_exploitation_status.check_exploitation_status","title":"<code>check_exploitation_status(testing_report)</code>","text":"<p>This function takes in the results from the attempted exploit and checks whether it was successful.</p> <p>Parameters:</p> Name Type Description Default <code>testing_report</code> <code>dict</code> <p>The results from the attempted exploit.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of all exploitations (both successful and unsuccessful) to be passed for risk assessment.</p> Source code in <code>src/check_exploitation_status.py</code> <pre><code>def check_exploitation_status(testing_report):\n    \"\"\"\n    This function takes in the results from the attempted exploit and checks whether it was successful.\n\n    Args:\n        testing_report (dict): The results from the attempted exploit.\n\n    Returns:\n        list: A list of all exploitations (both successful and unsuccessful) to be passed for risk assessment.\n    \"\"\"\n\n    all_exploitations = []\n\n    for exploit_report in testing_report.get(\"exploit_reports\", []):\n        for result in exploit_report.get(\"exploit_simulation_results\", []):\n            exploit_data = {\n                \"ip_address\": exploit_report.get(\"ip_address\"),\n                \"operating_system\": exploit_report.get(\"operating_system\"),\n                \"vulnerability\": result.get(\"vulnerability\"),\n                \"exploitability_score\": result.get(\"exploitability_score\"),\n                \"potential_impact\": result.get(\"potential_impact\"),\n                \"simulation_status\": \"Exploitation Successful\" if result.get(\"simulation_success_probability\") == \"High\" else \"Exploitation Failed\"\n            }\n\n            all_exploitations.append(exploit_data)\n\n            risk_assessment(exploit_data)\n\n    return all_exploitations\n</code></pre>"},{"location":"functions/check_vulnerability_status/","title":"Check Vulnerability Status","text":""},{"location":"functions/check_vulnerability_status/#src.check_vulnerability_status.check_vulnerability_status","title":"<code>check_vulnerability_status(vulnerability_report)</code>","text":"<p>Conducts a comprehensive vulnerability status check on the report</p> <p>Parameters:</p> Name Type Description Default <code>vulnerability_report</code> <code>dict</code> <p>Vulnerability report from previous analysis</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>Updated report that indicates the vulnerability status of each device.</p> Source code in <code>src/check_vulnerability_status.py</code> <pre><code>def check_vulnerability_status(vulnerability_report):\n    \"\"\"\n    Conducts a comprehensive vulnerability status check on the report\n\n    Args:\n        vulnerability_report (dict): Vulnerability report from previous analysis\n        (vulnerability analysis). If the vulnerability exists it will be sent into the\n        exploitation stage, else, the findings are appended to the final report.\n\n    Returns:\n        dict: Updated report that indicates the vulnerability status of each device.\n    \"\"\"\n\n    # Extract relevant data from the vulnerability report to initialize the final report\n    final_report = {\n        \"risk_level\": vulnerability_report.get(\"risk_level\", \"Unknown\"),\n        \"total_devices\": vulnerability_report.get(\"total_devices\", 0),\n        \"vulnerable_devices\": vulnerability_report.get(\"vulnerable_devices\", 0),\n        \"vulnerability_status\": []\n    }\n\n    # Iterate through each device in the vulnerability report\n    for device_report in vulnerability_report.get(\"device_reports\", []):\n        # Determine the status of each device based on the presence of vulnerabilities\n        status = \"Vulnerable\" if device_report.get(\"vulnerabilities\") else \"Not Vulnerable\"\n        next_stage = \"Exploitation\" if status == \"Vulnerable\" else \"No Further Action\"\n\n        # Add detailed status information to each device's report\n        device_status = {\n            \"ip_address\": device_report.get(\"ip_address\", \"Unknown\"),\n            \"operating_system\": device_report.get(\"OS\", \"Unknown\"),\n            \"vulnerabilities\": device_report.get(\"vulnerabilities\", []),\n            \"risk_level\": device_report.get(\"risk_level\", \"Unknown\"),\n            \"status\": status,\n            \"next_stage\": next_stage\n        }\n\n        # Append device status to the final report\n        final_report[\"vulnerability_status\"].append(device_status)\n\n    return final_report\n</code></pre>"},{"location":"functions/information_gathering/","title":"Information Gathering","text":""},{"location":"functions/information_gathering/#src.information_gathering.information_gathering","title":"<code>information_gathering()</code>","text":"<p>simulats the reconnaisance phase of a penetration test. </p> <p>The function reads the dummy data from data/network_log_data.json instead of performing actual network scans </p> <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing the network information read from a json file.</p> Source code in <code>src/information_gathering.py</code> <pre><code>def information_gathering():\n    \"\"\"\n    simulats the reconnaisance phase of a penetration test. \n\n    The function reads the dummy data from data/network_log_data.json instead of performing\n    actual network scans \n\n    Returns:\n        dict: A dictionary containing the network information read from a json file. \n\n    \"\"\"\n    try:\n        with open('CMSE_890_602_Project/src/data/network_log_data.json', encoding='UTF-8') as file:\n            network_logs = json.load(file)\n        return network_logs\n    except FileNotFoundError:\n        print(\"File not found\")\n        return (None)\n</code></pre>"},{"location":"functions/planning_and_preparation/","title":"Planning and Preparation Module","text":""},{"location":"functions/planning_and_preparation/#src.planning_and_preparation.planning_and_preparation","title":"<code>planning_and_preparation()</code>","text":"<p>Simulates the planning and preparation phase of a penetration test.</p> <p>This function defines the scope and goals of the penetration test, including the systems to be tested and the testing methods to be used, and documents these details in a report file.</p> <p>Returns:</p> Name Type Description <code>report_file</code> <code>str</code> <p>The generated report file(a text file) containing the primary information.</p> Source code in <code>src/planning_and_preparation.py</code> <pre><code>def planning_and_preparation():\n    \"\"\"\n    Simulates the planning and preparation phase of a penetration test.\n\n    This function defines the scope and goals of the penetration test, including the systems\n    to be tested and the testing methods to be used, and documents these details in a report file.\n\n    Returns:\n        report_file (str): The generated report file(a text file) containing the primary information.\n    \"\"\"\n    # Define the details\n    system_info = \"Sample System: Linux Server\"\n    scope_allowed = \"In-scope: Internal network (192.168.1.0/24)\\n Out-of-scope: External facing services\"\n\n    now = datetime.datetime.now()  # Create timestamp of report\n    report_content = f\"\"\"Penetration Test Planning report Generated at: {now}\\n\n                    System Information:\n                    {system_info}\n\n                    Test Scope:\n                    {scope_allowed}\n                     \"\"\"\n    # Create and write to a report file:\n    file = \"pentest_planning_report.txt\"\n\n    with open(file, 'a+', encoding='UTF-8') as report_file:\n        report_file.write(report_content)\n\n    return file\n</code></pre>"},{"location":"functions/risk_assesment/","title":"Risk Assesment","text":""},{"location":"functions/risk_assesment/#src.risk_assesment.risk_assessment","title":"<code>risk_assessment(exploit_data)</code>","text":"<p>Performs a risk assessment based on the exploitation results.</p> <p>Parameters:</p> Name Type Description Default <code>exploit_data</code> <code>dict</code> <p>Data from the exploitation attempt, including vulnerability, exploitability score, and potential impact.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A risk assessment report for the exploitation attempt.</p> Source code in <code>src/risk_assesment.py</code> <pre><code>def risk_assessment(exploit_data):\n    \"\"\"\n    Performs a risk assessment based on the exploitation results.\n\n    Args:\n        exploit_data (dict): Data from the exploitation attempt, including vulnerability, exploitability score, and potential impact.\n\n    Returns:\n        dict: A risk assessment report for the exploitation attempt.\n    \"\"\"\n    risk_level = \"Low\"\n\n    if exploit_data.get(\"exploitability_score\", 0) &gt; 8.0:\n        risk_level = \"High\"\n    elif exploit_data.get(\"exploitability_score\", 0) &gt; 5.0:\n        risk_level = \"Medium\"\n\n    risk_report = {\n        \"ip_address\": exploit_data.get(\"ip_address\"),\n        \"operating_system\": exploit_data.get(\"operating_system\"),\n        \"vulnerability\": exploit_data.get(\"vulnerability\"),\n        \"exploitability_score\": exploit_data.get(\"exploitability_score\"),\n        \"potential_impact\": exploit_data.get(\"potential_impact\"),\n        \"simulation_status\": exploit_data.get(\"simulation_status\"),\n        \"risk_level\": risk_level\n    }\n\n    print(\"Risk Assessment Report:\", risk_report)\n\n    return risk_report\n</code></pre>"},{"location":"functions/vulnerability_analysis/","title":"Vulnerability Analysis","text":""},{"location":"functions/vulnerability_analysis/#src.vulnerability_analysis.vulnerability_analysis","title":"<code>vulnerability_analysis(network_logs)</code>","text":"<p>Analyses network logs for vulnerabilities and generates report</p> <p>Function takes the network logs from information_gathering() step as input,  evaluates information for potential vulnerabilities, and creates a report</p> <p>Parameters:</p> Name Type Description Default <code>list(logs)</code> <p>A list of dictionaries containing network device information</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A vulnerability report containing: - overall_risk_level: High, Medium, or Low - vulnerable_devices: Count of devices with vulnerabilities - total_decices: The total number of devices analysed.  - device_reports: Detailed vulnerability information for each device</p> Source code in <code>src/vulnerability_analysis.py</code> <pre><code>def vulnerability_analysis(network_logs):\n    \"\"\"\n    Analyses network logs for vulnerabilities and generates report\n\n    Function takes the network logs from information_gathering() step as input, \n    evaluates information for potential vulnerabilities, and creates a report\n\n    Args:\n        list(logs): A list of dictionaries containing network device information\n\n    Returns:\n        dict: A vulnerability report containing:\n            - overall_risk_level: High, Medium, or Low\n            - vulnerable_devices: Count of devices with vulnerabilities\n            - total_decices: The total number of devices analysed. \n            - device_reports: Detailed vulnerability information for each device\n    \"\"\"\n\n    # Set up the default metrics in the report\n    vulnerability_report = {\n        \"risk_level\": \"Low\",\n        \"vulnerable_devices\": 0,\n        \"total_devices\": len(network_logs),\n        \"device_reports\": []\n    }\n\n    high_risk = 0\n\n    for device in network_logs:\n        device_report = {\n            \"ip_address\": device[\"ip_address\"],\n            \"OS\": device[\"operating_system\"],\n            \"vulnerabilities\": device[\"potential_vulnerabilities\"],\n            \"risk_level\": \"Low\"\n        }\n\n        # for this project, evaluate based on the num of vulnerabilities\n        # Note - This is normally not the case:\n        if len(device[\"potential_vulnerabilities\"]) &gt; 2:\n            device_report[\"risk_level\"] = \"high\"\n            high_risk += 1\n        elif len(device[\"potential_vulnerabilities\"]) &gt; 0:\n            device_report[\"risk_level\"] = \"medium\"\n\n        if device[\"potential_vulnerabilities\"]:\n            vulnerability_report[\"vulnerable_devices\"] += 1\n\n        vulnerability_report[\"device_reports\"].append(device_report)\n\n    if high_risk &gt; 2:\n        vulnerability_report[\"risk_level\"] = \"High\"\n    elif high_risk &gt; 0:\n        vulnerability_report[\"risk_level\"] = \"Medium\"\n\n    return vulnerability_report\n</code></pre>"}]}