# from attempt_exploit import attempt_exploit

# def check_vulnerability_status(vulnerability_report):
#     """
#     Conducts a comprehensive vulnerability status check on the report 

#     Args:
#         vulnerability_report (dict): Vulnerability report from previous analysis
#         (vulnerability analysis). If the vulnerability exists it will be sent into the
#         exploitation stage, else, the findings are appended to the final report. (return)

#     Returns:
#         dict: Report that indicates whether the vulnerability exists/not
#     """

#     final_report = {
#         "risk_level": vulnerability_report["risk_level"],
#         "total_devices": vulnerability_report["total_devices"],
#         "vulnerable_devices": vulnerability_report["vulnerable_devices"],
#         "vulnerability_status": []
#     }

#     for device_report in vulnerability_report["device_reports"]:
#         device_status = {
#             "ip_address": device_report["ip_address"],
#             "operating_system": device_report["OS"],
#             "vulnerabilities": device_report["vulnerabilities"],
#             "risk_level": device_report["risk_level"],
#             "status": "Vulnerable" if device_report["vulnerabilities"] else "Not Vulnerable"
#         }

#         # If vulnerabilities exist, send to exploitation stage
#         if device_status["status"] == "Vulnerable":
#             # attempt_exploit(vulnerability_report)
#             device_status["next_stage"] = "Exploitation"
#         else:
#             device_status["next_stage"] = "No Further Action"

#         final_report["vulnerability_status"].append(device_status)

#     return final_report



# from information_gathering import information_gathering
# logs = information_gathering()
# #print(logs)
# from vulnerability_analysis import vulnerability_analysis
# data = (vulnerability_analysis(logs))
# print(check_vulnerability_status(data))


def check_vulnerability_status(vulnerability_report):
    """
    Conducts a comprehensive vulnerability status check on the report

    Args:
        vulnerability_report (dict): Vulnerability report from previous analysis
        (vulnerability analysis). If the vulnerability exists it will be sent into the
        exploitation stage, else, the findings are appended to the final report.

    Returns:
        dict: Updated report that indicates the vulnerability status of each device.
    """

    # Extract relevant data from the vulnerability report to initialize the final report
    final_report = {
        "risk_level": vulnerability_report.get("risk_level", "Unknown"),
        "total_devices": vulnerability_report.get("total_devices", 0),
        "vulnerable_devices": vulnerability_report.get("vulnerable_devices", 0),
        "vulnerability_status": []
    }

    # Iterate through each device in the vulnerability report
    for device_report in vulnerability_report.get("device_reports", []):
        # Determine the status of each device based on the presence of vulnerabilities
        status = "Vulnerable" if device_report.get("vulnerabilities") else "Not Vulnerable"
        next_stage = "Exploitation" if status == "Vulnerable" else "No Further Action"

        # Add detailed status information to each device's report
        device_status = {
            "ip_address": device_report.get("ip_address", "Unknown"),
            "operating_system": device_report.get("OS", "Unknown"),
            "vulnerabilities": device_report.get("vulnerabilities", []),
            "risk_level": device_report.get("risk_level", "Unknown"),
            "status": status,
            "next_stage": next_stage
        }

        # Append device status to the final report
        final_report["vulnerability_status"].append(device_status)

    return final_report

# from information_gathering import information_gathering
# logs = information_gathering()
# #print(logs)
# from vulnerability_analysis import vulnerability_analysis
# data = (vulnerability_analysis(logs))
# print(check_vulnerability_status(data))