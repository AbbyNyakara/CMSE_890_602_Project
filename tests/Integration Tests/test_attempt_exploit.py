import unittest
from unittest.mock import patch
import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))
from src.attempt_exploit import attempt_exploit

class TestAttemptExploit(unittest.TestCase):

    def setUp(self):
        self.sample_vulnerability_report = {
            "device_reports": [
                {
                    "ip_address": "192.168.1.1",
                    "OS": "Windows 10",
                    "vulnerabilities": ["Zerologon CVE-2020-1472", "BlueKeep CVE-2019-0708"],
                    "risk_level": "High"
                },
                {
                    "ip_address": "192.168.1.2",
                    "OS": "Ubuntu 20.04",
                    "vulnerabilities": ["Log4Shell CVE-2021-44228"],
                    "risk_level": "Medium"
                }
            ]
        }

    @patch('random.uniform')
    def test_attempt_exploit(self, mock_uniform):
        # Set a fixed value for random.uniform to make the test deterministic
        mock_uniform.return_value = 8.0

        result = attempt_exploit(self.sample_vulnerability_report)

        # Check if the result is a list
        self.assertIsInstance(result, list)

        # Check if the number of exploit reports matches the number of devices
        self.assertEqual(len(result), 2)

        # Check the structure and content of the first exploit report
        first_report = result[0]
        self.assertEqual(first_report['ip_address'], "192.168.1.1")
        self.assertEqual(first_report['operating_system'], "Windows 10")
        self.assertEqual(first_report['vulnerabilities'], ["Zerologon CVE-2020-1472", "BlueKeep CVE-2019-0708"])
        self.assertEqual(first_report['risk_level'], "High")
        self.assertEqual(len(first_report['exploit_simulation_results']), 2)

        # Check details of the first vulnerability in the first report
        first_vulnerability = first_report['exploit_simulation_results'][0]
        self.assertEqual(first_vulnerability['vulnerability'], "Zerologon CVE-2020-1472")
        self.assertEqual(first_vulnerability['exploitability_score'], 8.0)
        self.assertEqual(first_vulnerability['potential_impact'], "Privilege Escalation")
        self.assertEqual(first_vulnerability['simulation_status'], "Attempted")
        self.assertEqual(first_vulnerability['simulation_success_probability'], "High")

    def test_empty_vulnerability_report(self):
        empty_report = {"device_reports": []}
        result = attempt_exploit(empty_report)

        self.assertEqual(result, [])

    def test_missing_device_reports(self):
        invalid_report = {}
        result = attempt_exploit(invalid_report)

        self.assertEqual(result, [])

if __name__ == '__main__':
    unittest.main()