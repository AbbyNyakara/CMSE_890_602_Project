from unittest.mock import patch
from src.risk_assesment import risk_assessment
from src.check_exploitation_status import check_exploitation_status
import unittest
import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))


class TestCheckExploitationStatus(unittest.TestCase):

    @patch('src.check_exploitation_status.risk_assessment')
    def test_check_exploitation_status(self, mock_risk_assessment):
        mock_risk_assessment.return_value = None

        testing_report = {
            "exploit_reports": [
                {
                    "ip_address": "192.168.1.1",
                    "operating_system": "Windows 10",
                    "exploit_simulation_results": [
                        {
                            "vulnerability": "CVE-2021-1234",
                            "exploitability_score": 8.5,
                            "potential_impact": "High",
                            "simulation_success_probability": "High"
                        },
                        {
                            "vulnerability": "CVE-2021-5678",
                            "exploitability_score": 6.2,
                            "potential_impact": "Medium",
                            "simulation_success_probability": "Low"
                        }
                    ]
                },
                {
                    "ip_address": "10.0.0.1",
                    "operating_system": "Ubuntu 20.04",
                    "exploit_simulation_results": [
                        {
                            "vulnerability": "CVE-2021-9876",
                            "exploitability_score": 7.1,
                            "potential_impact": "High",
                            "simulation_success_probability": "High"
                        }
                    ]
                }
            ]
        }

        expected_output = [
            {
                "ip_address": "192.168.1.1",
                "operating_system": "Windows 10",
                "vulnerability": "CVE-2021-1234",
                "exploitability_score": 8.5,
                "potential_impact": "High",
                "simulation_status": "Exploitation Successful"
            },
            {
                "ip_address": "192.168.1.1",
                "operating_system": "Windows 10",
                "vulnerability": "CVE-2021-5678",
                "exploitability_score": 6.2,
                "potential_impact": "Medium",
                "simulation_status": "Exploitation Failed"
            },
            {
                "ip_address": "10.0.0.1",
                "operating_system": "Ubuntu 20.04",
                "vulnerability": "CVE-2021-9876",
                "exploitability_score": 7.1,
                "potential_impact": "High",
                "simulation_status": "Exploitation Successful"
            }
        ]

        result = check_exploitation_status(testing_report)

        # check that the output matched!
        self.assertEqual(result, expected_output)

if __name__ == '__main__':
    unittest.main()
