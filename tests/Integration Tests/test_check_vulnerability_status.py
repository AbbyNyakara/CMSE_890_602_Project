import unittest
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))
from src.check_vulnerability_status import check_vulnerability_status

class TestCheckVulnerabilityStatus(unittest.TestCase):

    def setUp(self):
        self.sample_vulnerability_report = {
            "risk_level": "Medium",
            "total_devices": 3,
            "vulnerable_devices": 2,
            "device_reports": [
                {
                    "ip_address": "192.168.1.1",
                    "OS": "Windows 10",
                    "vulnerabilities": ["CVE-2021-1234", "CVE-2021-5678"],
                    "risk_level": "High"
                },
                {
                    "ip_address": "192.168.1.2",
                    "OS": "Ubuntu 20.04",
                    "vulnerabilities": ["CVE-2021-9876"],
                    "risk_level": "Medium"
                },
                {
                    "ip_address": "192.168.1.3",
                    "OS": "macOS Big Sur",
                    "vulnerabilities": [],
                    "risk_level": "Low"
                }
            ]
        }

    def test_check_vulnerability_status(self):
        result = check_vulnerability_status(self.sample_vulnerability_report)

        # Check if the basic structure of the result is correct
        self.assertIn("risk_level", result)
        self.assertIn("total_devices", result)
        self.assertIn("vulnerable_devices", result)
        self.assertIn("vulnerability_status", result)

        # Check if the values are correctly transferred
        self.assertEqual(result["risk_level"], "Medium")
        self.assertEqual(result["total_devices"], 3)
        self.assertEqual(result["vulnerable_devices"], 2)

        # Check if the vulnerability_status list has the correct number of items
        self.assertEqual(len(result["vulnerability_status"]), 3)

        # Check details of each device status
        for device_status in result["vulnerability_status"]:
            self.assertIn("ip_address", device_status)
            self.assertIn("operating_system", device_status)
            self.assertIn("vulnerabilities", device_status)
            self.assertIn("risk_level", device_status)
            self.assertIn("status", device_status)
            self.assertIn("next_stage", device_status)

        # Check specific details for each device
        self.assertEqual(result["vulnerability_status"]
                         [0]["status"], "Vulnerable")
        self.assertEqual(result["vulnerability_status"]
                         [0]["next_stage"], "Exploitation")
        self.assertEqual(result["vulnerability_status"]
                         [2]["status"], "Not Vulnerable")
        self.assertEqual(result["vulnerability_status"]
                         [2]["next_stage"], "No Further Action")

    def test_empty_vulnerability_report(self):
        empty_report = {}
        result = check_vulnerability_status(empty_report)

        self.assertEqual(result["risk_level"], "Unknown")
        self.assertEqual(result["total_devices"], 0)
        self.assertEqual(result["vulnerable_devices"], 0)
        self.assertEqual(result["vulnerability_status"], [])


if __name__ == '__main__':
    unittest.main()
