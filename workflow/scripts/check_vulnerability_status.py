import json

def check_vulnerability_status(input_file, output_file):
    """
    Conducts a comprehensive vulnerability status check on the report

    Args:
        input_file (str): Path to the input JSON file containing the vulnerability report
        output_file (str): Path to the output JSON file where the final report will be written

    Returns:
        None
    """
    # Read the input JSON file
    with open(input_file, 'r', encoding='UTF-8') as file:
        vulnerability_report = json.load(file)

    final_report = {
        "risk_level": vulnerability_report.get("risk_level", "Unknown"),
        "total_devices": vulnerability_report.get("total_devices", 0),
        "vulnerable_devices": vulnerability_report.get("vulnerable_devices", 0),
        "vulnerability_status": []
    }

    for device_report in vulnerability_report.get("device_reports", []):
        status = "Vulnerable" if device_report.get("vulnerabilities") else "Not Vulnerable"
        next_stage = "Exploitation" if status == "Vulnerable" else "No Further Action"

        device_status = {
            "ip_address": device_report.get("ip_address", "Unknown"),
            "operating_system": device_report.get("OS", "Unknown"),
            "vulnerabilities": device_report.get("vulnerabilities", []),
            "risk_level": device_report.get("risk_level", "Unknown"),
            "status": status,
            "next_stage": next_stage
        }

        final_report["vulnerability_status"].append(device_status)

    # Write the final report to the output JSON file
    with open(output_file, 'w', encoding='UTF-8') as file:
        json.dump(final_report, file, indent=4)

# Snakemake rule

